module GoldyLox
  class Expression
    def accept: [R] (_ExpressionVisitor[R]) -> R

    def self.attrs: (*Symbol) -> void

    class Binary < Expression
      attr_reader left: Expression
      attr_reader operator: Token
      attr_reader right: Expression

      def initialize: (Expression, Token, Expression) -> void
    end

    class Grouping < Expression
      attr_reader expression: Expression

      def initialize: (Expression) -> void
    end

    class Literal < Expression
      attr_reader value: Numeric | String

      def initialize: (Numeric | String) -> void
    end

    class Unary < Expression
      attr_reader operator: Token
      attr_reader right: Expression

      def initialize: (Token, Expression) -> void
    end
  end
end